name: 'Python Versionator'
description: 'Autoupdate the python package versions in your Github action matrix.'
inputs:

  action_path:
    description: 'The path to the action file to update.'
    required: true

  package:
    description: 'The python package whose version is being tracked.'
    required: true

  readme_path:
    description: 'The path to the README file to update.'
    required: true
    default: "${{ github.workspace }}/README.md"

  template_directory:
    description: 'The path to the README template.'
    required: true
    default: ""

  repository:
    description: 'The repository, for updating the readme.'
    required: true
    default: ${{ github.repository }}

  organization:
    description: 'The organization, for updating the readme.'
    required: true
    default: ${{ github.repository_owner }}

  git_name:
    description: 'The name to use as the author of the commit.'
    required: true
    default: ${{ github.repository_owner }}

  git_email:
    description: 'The email to use for the author of the commit.'
    required: true
    default: "python-versionator@tedivm.com"

  max_versions:
    description: 'The maximum number of versions (from most current back) to inject into the action.'
    required: true
    default: '5'

  exclude_versions:
    description: 'A comma separated list of versions to exclude.'
    required: true
    default: ''

  skip_readme:
    description: 'When set to true the readme fill will not be generated.'
    required: true
    default: 'false'

  include_prereleases:
    description: 'If set to true prereleases (alpha, beta, rc) will also be built.'
    required: true
    default: "false"

  update_python:
    description: 'When enabled python versions will also be updated.'
    required: true
    default: 'true'


runs:
  using: "composite"
  steps:

    - uses: "actions/setup-python@v5"

    - name: Update Package Versions
      shell: bash
      run: "bash ${{ github.action_path }}/scripts/update_packages.sh \"${{ inputs.package }}\" \"${{ inputs.action_path }}\""
      env:
        MAX_VERSIONS: ${{ inputs.max_versions }}
        INCLUDE_PRERELEASE: ${{ inputs.include_prereleases }}
        EXCLUDE_VERSIONS: ${{ inputs.exclude_versions }}

    - name: Update Python Versions
      shell: bash
      run: |
        if [ "${{inputs.update_python}}" == "true" ]; \
        then sed -i 's/python_versions:.*/python_versions: [\"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\"] /' "${{ inputs.action_path }}"; \
        else echo "Skipping python version update"; fi

    - name: "Install Jinja2"
      shell: bash
      run: "python -m pip install jinja2 pyyaml"

    - name: "Install github-markdown-toc"
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/ekalinin/github-markdown-toc/master/gh-md-toc -o ${{ github.action_path }}/scripts/gh-md-toc
        chmod a+x ${{ github.action_path }}/scripts/gh-md-toc

    - name: "Update README.md"
      shell: bash
      run: "bash ${{ github.action_path }}/scripts/update_readme.sh \"${{ inputs.readme_path }}\""
      env:
        TEMPLATE_DIRECTORY: ${{ inputs.template_directory }}
        PACKAGE: ${{ inputs.package }}
        PROJECT_NAME: ${{ inputs.package }}
        PYTHON_VERSIONS: "3.8 3.9 3.10 3.11 3.12"
        MAX_VERSIONS: ${{ inputs.max_versions }}
        ORGANIZATION: ${{ inputs.organization }}
        REPOSITORY: ${{ inputs.repository }}
        REPOSITORY_SHORT: ${{ github.event.repository.name }}
        INCLUDE_PRERELEASE: ${{ inputs.include_prereleases }}
        BUILDER_WORKFLOW_PATH: ${{ inputs.action_path }}
        EXCLUDE_VERSIONS: ${{ inputs.exclude_versions }}
        SKIP_README:  ${{ inputs.skip_readme }}

    - name: "Push"
      shell: bash
      run: "bash ${{ github.action_path }}/scripts/push.sh"
      env:
        GIT_USER: ${{ inputs.git_name }}
        GIT_EMAIL: ${{ inputs.git_email }}
        ACTION_PATH: ${{ inputs.action_path }}
        README_PATH: ${{ inputs.readme_path }}
